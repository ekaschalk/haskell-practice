#+TITLE: Haskell from First Principles

* Previous Chapters
** Info
Link to book:
https://h.sicp.org.uk/virtual~plaza/books/haskell%20first%20principles.pdf
file:///C:/Users/ekasc/Desktop/haskell%20first%20principles.pdf

** 2. Hello, Haskell!
** 2.4. Functions
Type variables usually denoted a, b, c...
Argument variables denoted x, y, ..., x', y', ..., x1, y1, ....

#+begin_src haskell
-- Ex.1
let half x = x / 2
let square x = x * x
-- Ex.2
let area x = 3.14 * square x
let area = (* 3.14) square

area 2
#+end_src

#+RESULTS:
: 12.56

** 2.5. Infix operators
=id= is the identity function

#+begin_src haskell
id 1
#+end_src

#+RESULTS:
: 1

=:info (:i)= in ghci takes operator or function

#+begin_src haskell
:i (+)
#+end_src

#+RESULTS:
: class Num a where
:   (+) :: a -> a -> a
:   ...
:   	-- Defined in `GHC.Num'
: infixl 6 +

l -> left associative
6 -> precedence on scale of 0-9, higher applied first
** 2.6. Declaring values
Indentation patterns

#+begin_src haskell
let
  x = 3
  y = 4

let x = 3
    y = 4

foo x =
    let y = x * 2
        z = x ^ 2
    in 2 * y * z
#+end_src

** 2.12. Let and where
Lambdas, lets, and wheres:

#+begin_src haskell
let x = 5 in x  -- 5
let x = 5 in x * x  -- 25
let x = 5; y = 6 in x * y  -- 30
let x = 3; y = 1000 in x + 3  -- 6

-- Examples
(\x -> x) 0  -- 0
(\x -> x+1) 0  -- 1

-- Deconstructing let
let a = b in c
-- Same as
(\a -> c) b
-- Concrete:
let x = 1 in x + 2
(\x -> x + 2) 1

-- Wheres
c where a = b
(\a -> c) b
x + 2 where x = 1
#+end_src

Exercises:

#+begin_src haskell
-- Ex1
-- in let notation:
let x = 3; y = 1000 in x * 3 + y
-- in lambdas
(\x y -> x * 3 + y) 3 1000
#+end_src

#+RESULTS:
: Prelude> 1009

** 2.13. Chapter exercises
Equivalent applications with =$=

#+begin_src haskell
-- Ex1
2 + 2 * 3 - 3
(+ 2) $ 2 * 3 - 3

-- Ex2
(^) 10 $ 1 + 1
10 ^ (1 + 1)

-- Ex3
2 ^ 2 * 4 ^ 5 + 1
(+) 1 $ (*) (2 ^ 2) $ (4 ^ 5)
#+end_src

** 3. Strings
** 3.3. Printing simple strings
=:type= for type of symbol.
'::' can be read "has the type".

Printing a string in a source file:

#+begin_src haskell
module Print1 where

main :: IO ()
main = putStrLn "hi"

main
#+end_src

#+RESULTS:
: Prelude> Prelude> hi

Printing a string in a source file with do notation:

#+begin_src haskell
module Print2 where

main :: IO ()
main = do
  putStrLn "1"
  putStrLn "2"

main
#+end_src

#+RESULTS:
: Prelude| Prelude| Prelude| Prelude> 1
: 2

Exercises

#+begin_src haskell
area d = pi * r
  where r = d / 2

area 3
#+end_src

#+RESULTS:
: 28.26

** 3.7. Chapter exercises
Building functions:

#+begin_src haskell
drop_end = reverse . (drop 1) . reverse
-- or
drop_end x = take ((length x) - 1) x
-- or
drop_end x = take ((+ negate 1) $ length x) x
#+end_src

** 4. Basic Data-types
** 4.2. Anatomy of a data declaration
`Data declaration` of Bool.

#+begin_src haskell
data Bool = False | True
#+end_src

=Bool= is the `type constructor`.
=False/True= are `data constructors`.
=|= is logical disjunction.

Exercises

#+begin_src haskell
data Mood = Blah | Woot deriving Show

change Blah = Woot
change _ = Blah
#+end_src

** 4.3. Numeric types
- Num :: Base class for numeric types
- Integral numbers :: Int, Integer
- Fractional :: Float, Double, Rational, Scientific

** 4.4. Comparing values
Not equal done with `/=`.
=Eq= typeclass for equality comparisons.
=Ord= for ordered types.

Ternary syntax: if COND then TRUE_VAL else FALSE_VAL

** 4.7. Chapter Exercises

#+begin_src haskell
-- Ex1
length :: [a] -> Int
--Ex3
(\xs -> head xs) [1, 2]
f (x:xs) = x
-- Ex4
f (a, b) = a
#+end_src

#+RESULTS:
: Prelude> 1
** 5. Types
See code for exercises, no text notes necessary.

** 6. Type-classes
** 6.8. Enum
#+begin_src haskell
enumFromThenTo 'a' 'c' 'z'
#+end_src

#+RESULTS:
: acegikmoqsuwy

** 6.9. Show
Typeclasses that can be derived via eg. =data A = B deriving Show=: Eq,
Ord, Enum, Bounded, Read, Show.

** 6.11 Writing instances for your typeclasses

First Typeclass:
#+begin_src haskell
data DayOfWeek =
  Mon | Tue | Weds | Thu | Fri | Sat | Sun

data Date =
  Date DayOfWeek Int

instance Eq DayOfWeek where
  (==) Mon Mon = True
  (==) _ _ = False

instance Eq Date where
  (==) (Date weekday monthNum)
       (Date weekday' monthNum') =
    weekday == weekday' && monthNum == monthNum'

Date Mon 10 == Date Mon 10
#+end_src

Deriving Ord will order on the individual types.
** 7. More Functional Patterns
** 8. Recursion
** 9. Lists
** 10. Folds
** 11. Algebraic Data-types
=newtype= is unary constructor without products/sums.

1. No runtime overhead.
2. Can define type-class instances for newtypes that different from their
   underlying type.

#+begin_src haskell
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
-- allows
newtype Goats = Goats Int deriving (Eq, Show, TooMany)
#+end_src

* Functors
